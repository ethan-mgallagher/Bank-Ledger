cmdhistory=["(@ledg)" "(@ledge 2006)" "(@ledg 2006)" "(add-account ledg 2007 1200 \\"E. Allen Emerson\\")" "(add-account ledg 2008 2000 \\"Barbara Liskov\\")\\n(add-account ledg 2009 1800 \\"Charles P. Thacker\\")" "(@ledg 2006)" "@((@ledg 2006) \:balance)" "(remove-account ledg 2006)" "(remove-account ledg 2007)" "(remove-account ledg 2008)" "(@ledg)" "(println @ledg)" "(remove-account ledg 2009)" "(add-account ledg 2006 \\"Frances Allen\\" 1000)\\n(add-account ledg 2007 \\"E. Allen Emerson\\" 1200)\\n(add-account ledg 2008 \\"Barbara Liskov\\" 2000)\\n(add-account ledg 2009 \\"Charles P. Thacker\\" 1800)" "(println @ledg)" "@((@ledg 2009) \:balance)" "(deposit ledg 2009 200)" "(deposit ledg 2020 200)" "(contains? ledg 2009)" "(contains? @ledg 2009)" "(dosync (alter ((@ledg 2009) \:balance) \#(+ % 10)))" "(defn deposit [ ledger id amt ]\\n  (if\\n    (\= (contains? @ledger id) false) nil\\n    )\\n     (dosync\\n     (alter ((@ledger id) \:balance) \#(+ % amt)))\\n     (@((@ledger id) \:balance))\\n     )" "(deposit ledg 2009 200)" "(defn deposit [ ledger id amt ]\\n ; (if\\n  ;  (\= (contains? @ledger id) false) nil\\n   ; )\\n     (dosync\\n     (alter ((@ledger id) \:balance) \#(+ % amt)))\\n     (@((@ledger id) \:balance))\\n     )" "(deposit ledg 2009 200)" "(\= (contains? @ledg 2020) false)" "\\n(defn deposit [ ledger id amt ]\\n  (cond\\n   (\= (contains? @ledger id) false) nil\\n   \:else (dosync\\n     (alter ((@ledger id) \:balance) \#(+ % amt)))\\n   ) \\n     (@((@ledger id) \:balance))\\n     )" "(deposit ledg 3000 40)" "(defn deposit [ ledger id amt ]\\n  (cond\\n   (\= (contains? @ledger id) false) nil\\n   \:else (do (dosync (alter ((@ledger id) \:balance) \#(+ % amt)))\\n           (@((@ledger id) \:balance)))))" "(deposit ledg 3000 40)" "(deposit 2009 200)" "(deposit ledg 2009 200)" "(defn deposit [ ledger id amt ]\\n  (cond\\n   (\= (contains? @ledger id) false) nil\\n   \:else (do \\n           (dosync (alter ((@ledger id) \:balance) \#(+ % 200)))\\n           (@((@ledger id) \:balance)))))" "(deposit ledg 2009 200)" "(dosync (alter ((@ledger 2009) \:balance) \#(+ % 200)))" "(dosync (alter ((@ledg 2009) \:balance) \#(+ % 200)))" "(defn deposit [ ledger id amt ]\\n  (cond\\n   (\= (contains? @ledger id) false) nil\\n   \:else (do \\n           (dosync (alter ((@ledger id) \:balance) \#(+ % amt)))\\n           ;(@((@ledger id) \:balance))\\n           )))" "(deposit ledg 2009 200)" "(defn deposit [ ledger id amt ]\\n  (cond\\n   (\= (contains? @ledger id) false) nil\\n   \:else (do \\n           (dosync (alter ((@ledger id) \:balance) \#(+ % amt)))\\n           @((@ledger id) \:balance)\\n           )))" "(deposit ledg 2009 300)" "(transfer ledg 2009 2006 200)" "(println ledg)" "(transfer ledg 2006 2009 100000000)" "(println ledg)" "(load-file \\"ledger.core\\")" "(load-file \\"/home/ethan/Ledger/src/ledger/core.clj\\")" "(load-file \\"/home/ethan/Ledger/src/ledger/core.clj\\")\\n\\n(def ledg (ref {}))\\n\\n(add-account ledg 2006 \\"Frances Allen\\" 1000)\\n(add-account ledg 2007 \\"E. Allen Emerson\\" 1200)\\n(add-account ledg 2008 \\"Barbara Liskov\\" 2000)\\n(add-account ledg 2009 \\"Charles P. Thacker\\" 1800)\\n\\n(println @ledg)\\n(println)" "(deposit ledg 2009 100)" "(load \\"ledger.core" "(load \\"ledger.core\\")" "(load ledger.core)" "(load \\"ledger/core\\")" "(load \\"core\\")" "(load \\"ledger.core" "(println (transfer ledg 2007 2009 1000000))" "(println @attempted-transfer-count)" "@attempted-transfer-count" "@successful-transfer-count" "(acctMap 0)" "(rand-int 4)" "(def count (agent 0))" "(def counter (agent 0))" "(swap\! counter inc)" "(println ledg)" "(println @ledg)" " (def counter (agent 0))" "(send counter inc)" "@counter" "(dotimes ( _ 10) (println 1))" "(dotimes [ _ 4 ] (println 1))" "(def acctMap { 0 2006, 1 2007, 2 2008, 3 2009})" "(acctMap 0)" "(transfer 2009 2006 10000)" "(transfer ledg 2009 2006 10000)" "(\= (transfer ledg 2009 2006 10000000) nil)" "(reset\! randI (rand-int 4))" "@randI" "(transfer 2009 2007 10)" "(transfer ledg 2009 2007 10)" "@ledg" "(acctMap randI)" "(acctMap @randI)" "(acctMap @randI2)" "(defn now [] (new Java.util.Date))" "(import clj-time)" "(import java.util.Date)" "(defn now [] (new Java.util.Date))" "(defn now [] (new java.util.Date))" "now" "(println now)" "now.getTime()" "@now" "(.getTime ( now))" "(.getTime (now))" "(def now [] (new java.util.Date))" "(.getTime (now))" "(def start (.getTime (now)))" "start" "(def thacker (remove-account 2009))" "(def thacker (remove-account ledg 2009\\n                             ))" "(println thacker)" "(println (thacker \:name))" "(println (thacker \:balance))" "(def tester (ref 0))" "(alter tester inc)" "{ 1 4, 5 6, 2 8 }" "(def testMap {1 4, 5 6, 2 8 })" "(vals testMap)" "(vals @ledg)" "(size (vals @ledg))" "(count (vals @ledg))" "(first (vals @ledg))" "(defn consistency-check [ ledg num-accounts total-balances ]\\n  (dosync \\n    (def totalBalance (atom 0))\\n    (let [ accounts (vals @ledg) num (count (vals @ledg)) ]\\n      (loop [ n num accts accounts total 0 ]\\n        (cond\\n          (\= n 0) (reset\! totalBalance total)\\n          \:else (recur (- n 1) (rest accounts) (+ total @(\:balance (first (vals @ledg)))) )\\n          )\\n        )\\n      (cond \\n        (not\= total-balances totalBalance) false\\n        (not\= num-accounts (count (vals @ledg))) false\\n        \:else true\\n        ))))" "(consistency-check ledg 4 6000)" "@ledg" "(count (vals @ledg))" "@(\:balance (first (vals @ledg)))" "(defn consistency-check [ ledg num-accounts total-balances ]\\n  (dosync \\n    (def totalBalance (atom 0))\\n    (let [ accounts (vals @ledg) num (count (vals @ledg)) ]\\n      (loop [ n num accts accounts total 0 ]\\n        (cond\\n          (\= n 0) (reset\! totalBalance total)\\n          \:else (recur (- n 1) (rest accts) (+ total @(\:balance (first (vals @ledg)))) )\\n          )\\n        )\\n      (cond \\n        (not\= total-balances totalBalance) false\\n        (not\= num-accounts (count (vals @ledg))) false\\n        \:else true\\n        ))))" "(consistency-check ledg 4 6000)" "(defn consistency-check [ ledg num-accounts total-balances ]\\n  (dosync \\n    (def temp (atom 0))\\n    (let [ accounts (vals @ledg) num (count (vals @ledg)) ]\\n      (loop [ n num accts accounts total 0 ]\\n        (cond\\n          (\= n 0) (reset\! temp total) \\n          \:else (recur (- n 1) (rest accts) (+ total @(\:balance (first (vals @ledg)))) )\\n          )\\n        )\\n      (cond \\n        (not\= total-balances totalBalance) false\\n        (not\= num-accounts (count (vals @ledg))) false\\n        \:else true\\n        ))))" "(consistency-check ledg 4 6000)" "(defn consistency-check [ ledg num-accounts total-balances ]\\n  (dosync \\n    (def temp (atom 0))\\n    (let [ accounts (vals @ledg) num (count (vals @ledg)) ]\\n      (loop [ n num accts accounts total 0 ]\\n        (cond\\n          (\= n 0) (reset\! temp total) \\n          \:else (recur (- n 1) (rest accts) (+ total @(\:balance (first (vals @ledg)))) )\\n          )\\n        )\\n      (cond \\n        (not\= total-balances temp) false\\n        (not\= num-accounts (count (vals @ledg))) false\\n        \:else true\\n        ))))" "(consistency-check ledg 4 6000)" "(def temp (atom 0))" "(reset\! temp 40)" "@temp" "(defn consistency-check [ ledg num-accounts total-balances ]\\n  (dosync \\n    (def temp (atom 0))\\n    (let [ accounts (vals @ledg) num (count (vals @ledg)) ]\\n      (loop [ n num accts accounts total 0 ]\\n        (cond\\n          (\= n 0) (reset\! temp total) \\n          \:else (recur (- n 1) (rest accts) (+ total @(\:balance (first (accts)))) )\\n          )\\n        )\\n      (cond \\n        (not\= total-balances temp) false\\n        (not\= num-accounts (count (vals @ledg))) false\\n        \:else true\\n        ))))" "(consistency-check ledg 4 6000)" "(defn consistency-check [ ledg num-accounts total-balances ]\\n  (dosync \\n    (def temp (atom 0))\\n    ;;Add up total in all accounts\\n      (loop [ n (count (vals @ledg)) accts (vals @ledg) total 0 ]\\n        (cond\\n          (\= n 0) (reset\! temp total) \\n          \:else (recur (- n 1) (rest accts) (+ total @(\:balance (first (accts)))) )\\n          )\\n        )\\n      (cond \\n        (not\= total-balances temp) false\\n        (not\= num-accounts (count (vals @ledg))) false\\n        \:else true\\n        )))" "(consistency-check ledg 4 6000)" "(def accts (vals @ledg))" "(first accts)" "@(\:balance (first accts))" "(defn consistency-check [ ledg num-accounts total-balances ]\\n  (dosync \\n    (def temp (atom 0))\\n    ;;Add up total in all accounts\\n      (loop [ n (count (vals @ledg)) accts (vals @ledg) total 0 ]\\n        (cond\\n          (\= n 0) (reset\! temp total) \\n          \:else (recur (- n 1) (rest accts) (+ total @(\:balance (first accts))) )\\n          )\\n        )\\n      (cond \\n        (not\= total-balances temp) false\\n        (not\= num-accounts (count (vals @ledg))) false\\n        \:else true\\n        )))" "(consistency-check ledg 4 6000)" "(defn consistency-check [ ledg num-accounts total-balances ]\\n  (dosync \\n    (def temp (atom 0))\\n    ;;Add up total in all accounts\\n      (loop [ n (count (vals @ledg)) accts (vals @ledg) total 0 ]\\n        (cond\\n          (\= n 0) (reset\! temp total) \\n          \:else (recur (- n 1) (rest accts) (+ total @(\:balance (first accts))) )\\n          )\\n        )\\n      (cond \\n        (not\= total-balances temp) (do (println temp) false)\\n        (not\= num-accounts (count (vals @ledg))) false\\n        \:else true\\n        )))" "(consistency-check ledg 4 6000)" "(defn consistency-check [ ledg num-accounts total-balances ]\\n  (dosync \\n    (def temp (atom 0))\\n    ;;Add up total in all accounts\\n      (loop [ n (count (vals @ledg)) accts (vals @ledg) total 0 ]\\n        (cond\\n          (\= n 0) (reset\! temp total) \\n          \:else (recur (- n 1) (rest accts) (+ total @(\:balance (first accts))) )\\n          )\\n        )\\n      (cond \\n        (not\= total-balances @temp) (do (println temp) false)\\n        (not\= num-accounts (count (vals @ledg))) false\\n        \:else true\\n        )))" "(consistency-check ledg 4 6000)" "@start" "(reset\! start (.getTime (now)))" "  (while (< (.getTime (now)) (+ @start 10000))\\n    (cond \\n      (\= (transfer ledg (acctMap (rand-int 4)) (acctMap (rand-int 4)) 100) nil) (send attempted-transfer-count inc)\\n      \:else (do \\n              (send attempted-transfer-count inc)\\n              (dosync (alter successful-transfer-count inc)))\\n      )\\n    (Thread/sleep ( 20 + (rand-int 61)))\\n    )" "(reset\! start (.getTime (now)))" "(< (.getTime (now)) (+ @start 10000))" "(consistency-check ledg 4 6000)" "(remove-account ledg 2009)" "(count (vals @ledg))" "(consistency-check ledg 4 6000)" "@remove-and-add-count" "(dosync (alter remove-and-add-count inc))" "@remove-and-add-count" "@ledg" "(def temp (atom {}))" "(reset\! temp (remove-account ledg 2009))" "(add-account ledg 2009 (@temp \:name) @(@temp \:balance))" "@ledg" "(consistency-check ledg 4 6000)" "@temp" "@removed" "(consistency-check ledg 4 6000)" "@ledg" "(withdraw ledg \\n  2007 1000)" "@ledg" "(deposit ledg 2007 300)" "(withdraw ledg 2007 1300)" "@ledg" "(withdraw ledg 2007 1000)"]
eclipse.preferences.version=1
